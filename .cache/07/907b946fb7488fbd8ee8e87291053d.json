{"id":"node_modules/@aws-sdk/middleware-retry/dist/cjs/configurations.js","dependencies":[{"name":"/Users/spittela/code/giphlify/package.json","includedInParent":true,"mtime":1600722302325},{"name":"/Users/spittela/code/giphlify/.babelrc","includedInParent":true,"mtime":1599669969128},{"name":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/package.json","includedInParent":true,"mtime":1600722667342},{"name":"tslib","loc":{"line":4,"column":22},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/configurations.js","resolved":"/Users/spittela/code/giphlify/node_modules/tslib/tslib.es6.js"},{"name":"./defaultStrategy","loc":{"line":5,"column":32},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/configurations.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveRetryConfig = void 0;\nvar tslib_1 = require(\"tslib\");\nvar defaultStrategy_1 = require(\"./defaultStrategy\");\nexports.resolveRetryConfig = function (input) {\n    var _a;\n    var maxAttempts = (_a = normalizeMaxAttempts(input.maxAttempts)) !== null && _a !== void 0 ? _a : input.maxAttemptsDefaultProvider(input);\n    return tslib_1.__assign(tslib_1.__assign({}, input), { maxAttempts: maxAttempts, retryStrategy: input.retryStrategy || new defaultStrategy_1.StandardRetryStrategy(maxAttempts) });\n};\nvar normalizeMaxAttempts = function (maxAttempts) {\n    if (maxAttempts) {\n        var promisified_1 = Promise.resolve(maxAttempts.toString());\n        return function () { return promisified_1; };\n    }\n};\n"},"sourceMaps":{"js":{"version":3,"file":"configurations.js","sourceRoot":"","sources":["../../src/configurations.ts"],"names":[],"mappings":";;;;AAEA,qDAA0D;AAqB7C,QAAA,kBAAkB,GAAG,UAAI,KAAgD;;IACpF,IAAM,WAAW,SAAG,oBAAoB,CAAC,KAAK,CAAC,WAAW,CAAC,mCAAI,KAAK,CAAC,0BAA0B,CAAC,KAAY,CAAC,CAAC;IAC9G,6CACK,KAAK,KACR,WAAW,aAAA,EACX,aAAa,EAAE,KAAK,CAAC,aAAa,IAAI,IAAI,uCAAqB,CAAC,WAAW,CAAC,IAC5E;AACJ,CAAC,CAAC;AAEF,IAAM,oBAAoB,GAAG,UAAC,WAAoB;IAChD,IAAI,WAAW,EAAE;QACf,IAAM,aAAW,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5D,OAAO,cAAM,OAAA,aAAW,EAAX,CAAW,CAAC;KAC1B;AACH,CAAC,CAAC","sourcesContent":["import { Provider, RetryStrategy } from \"@aws-sdk/types\";\n\nimport { StandardRetryStrategy } from \"./defaultStrategy\";\n\nexport interface RetryInputConfig {\n  /**\n   * The maximum number of times requests that encounter retryable failures should be attempted.\n   */\n  maxAttempts?: number;\n  /**\n   * The strategy to retry the request. Using built-in exponential backoff strategy by default.\n   */\n  retryStrategy?: RetryStrategy;\n}\n\ninterface PreviouslyResolved {\n  maxAttemptsDefaultProvider: (input: any) => Provider<string>;\n}\nexport interface RetryResolvedConfig {\n  maxAttempts: Provider<string>;\n  retryStrategy: RetryStrategy;\n}\n\nexport const resolveRetryConfig = <T>(input: T & PreviouslyResolved & RetryInputConfig): T & RetryResolvedConfig => {\n  const maxAttempts = normalizeMaxAttempts(input.maxAttempts) ?? input.maxAttemptsDefaultProvider(input as any);\n  return {\n    ...input,\n    maxAttempts,\n    retryStrategy: input.retryStrategy || new StandardRetryStrategy(maxAttempts),\n  };\n};\n\nconst normalizeMaxAttempts = (maxAttempts?: number): Provider<string> | undefined => {\n  if (maxAttempts) {\n    const promisified = Promise.resolve(maxAttempts.toString());\n    return () => promisified;\n  }\n};\n"]}},"error":null,"hash":"f81a33455a7bc20033cd7b70e43f2e62","cacheData":{"env":{}}}