{"id":"node_modules/@aws-sdk/middleware-stack/dist/cjs/MiddlewareStack.js","dependencies":[{"name":"/Users/spittela/code/giphlify/package.json","includedInParent":true,"mtime":1600722302325},{"name":"/Users/spittela/code/giphlify/.babelrc","includedInParent":true,"mtime":1599669969128},{"name":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-stack/package.json","includedInParent":true,"mtime":1600722667592},{"name":"tslib","loc":{"line":4,"column":22},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-stack/dist/cjs/MiddlewareStack.js","resolved":"/Users/spittela/code/giphlify/node_modules/tslib/tslib.es6.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MiddlewareStack = void 0;\nvar tslib_1 = require(\"tslib\");\nvar MiddlewareStack = /** @class */ (function () {\n    function MiddlewareStack() {\n        this.absoluteEntries = [];\n        this.relativeEntries = [];\n        this.entriesNameMap = {};\n    }\n    MiddlewareStack.prototype.add = function (middleware, options) {\n        if (options === void 0) { options = {}; }\n        var name = options.name, _a = options.step, step = _a === void 0 ? \"initialize\" : _a, tags = options.tags, _b = options.priority, priority = _b === void 0 ? \"normal\" : _b;\n        var entry = {\n            name: name,\n            step: step,\n            tags: tags,\n            priority: priority,\n            middleware: middleware,\n        };\n        if (name) {\n            if (Object.prototype.hasOwnProperty.call(this.entriesNameMap, name)) {\n                throw new Error(\"Duplicated middleware name '\" + name + \"'\");\n            }\n            this.entriesNameMap[name] = entry;\n        }\n        this.absoluteEntries.push(entry);\n    };\n    MiddlewareStack.prototype.addRelativeTo = function (middleware, options) {\n        var _a = options.step, step = _a === void 0 ? \"initialize\" : _a, name = options.name, tags = options.tags, relation = options.relation, toMiddleware = options.toMiddleware;\n        var entry = {\n            middleware: middleware,\n            step: step,\n            name: name,\n            tags: tags,\n            next: relation === \"before\" ? toMiddleware : undefined,\n            prev: relation === \"after\" ? toMiddleware : undefined,\n        };\n        if (name) {\n            if (Object.prototype.hasOwnProperty.call(this.entriesNameMap, name)) {\n                throw new Error(\"Duplicated middleware name '\" + name + \"'\");\n            }\n            this.entriesNameMap[name] = entry;\n        }\n        this.relativeEntries.push(entry);\n    };\n    MiddlewareStack.prototype.sort = function (entries) {\n        //reverse before sorting so that middleware of same step will execute in\n        //the order of being added\n        return entries.sort(function (a, b) {\n            return stepWeights[b.step] - stepWeights[a.step] ||\n                priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"];\n        });\n    };\n    MiddlewareStack.prototype.clone = function () {\n        var _a, _b;\n        var clone = new MiddlewareStack();\n        (_a = clone.absoluteEntries).push.apply(_a, tslib_1.__spread(this.absoluteEntries));\n        (_b = clone.relativeEntries).push.apply(_b, tslib_1.__spread(this.relativeEntries));\n        clone.entriesNameMap = tslib_1.__assign({}, this.entriesNameMap);\n        return clone;\n    };\n    MiddlewareStack.prototype.concat = function (from) {\n        var _a, _b;\n        var clone = new MiddlewareStack();\n        clone.entriesNameMap = tslib_1.__assign({}, this.entriesNameMap);\n        // IMiddlewareStack interface doesn't contain private members variables\n        // like `entriesNameMap`, but in fact the function expects `MiddlewareStack`\n        // class instance. So here we cast it.\n        var _from = from;\n        for (var name in _from.entriesNameMap) {\n            if (clone.entriesNameMap[name]) {\n                throw new Error(\"Duplicated middleware name '\" + name + \"'\");\n            }\n            clone.entriesNameMap[name] = _from.entriesNameMap[name];\n        }\n        (_a = clone.absoluteEntries).push.apply(_a, tslib_1.__spread(this.absoluteEntries, _from.absoluteEntries));\n        (_b = clone.relativeEntries).push.apply(_b, tslib_1.__spread(this.relativeEntries, _from.relativeEntries));\n        return clone;\n    };\n    MiddlewareStack.prototype.remove = function (toRemove) {\n        if (typeof toRemove === \"string\")\n            return this.removeByName(toRemove);\n        else\n            return this.removeByReference(toRemove);\n    };\n    MiddlewareStack.prototype.removeByName = function (toRemove) {\n        for (var i = this.absoluteEntries.length - 1; i >= 0; i--) {\n            if (this.absoluteEntries[i].name && this.absoluteEntries[i].name === toRemove) {\n                this.absoluteEntries.splice(i, 1);\n                delete this.entriesNameMap[toRemove];\n                return true;\n            }\n        }\n        for (var i = this.relativeEntries.length - 1; i >= 0; i--) {\n            if (this.relativeEntries[i].name && this.relativeEntries[i].name === toRemove) {\n                this.relativeEntries.splice(i, 1);\n                delete this.entriesNameMap[toRemove];\n                return true;\n            }\n        }\n        return false;\n    };\n    MiddlewareStack.prototype.removeByReference = function (toRemove) {\n        for (var i = this.absoluteEntries.length - 1; i >= 0; i--) {\n            if (this.absoluteEntries[i].middleware === toRemove) {\n                var name = this.absoluteEntries[i].name;\n                if (name)\n                    delete this.entriesNameMap[name];\n                this.absoluteEntries.splice(i, 1);\n                return true;\n            }\n        }\n        for (var i = this.relativeEntries.length - 1; i >= 0; i--) {\n            if (this.relativeEntries[i].middleware === toRemove) {\n                var name = this.relativeEntries[i].name;\n                if (name)\n                    delete this.entriesNameMap[name];\n                this.relativeEntries.splice(i, 1);\n                return true;\n            }\n        }\n        return false;\n    };\n    MiddlewareStack.prototype.removeByTag = function (toRemove) {\n        var removed = false;\n        for (var i = this.absoluteEntries.length - 1; i >= 0; i--) {\n            var _a = this.absoluteEntries[i], tags = _a.tags, name = _a.name;\n            if (tags && tags.indexOf(toRemove) > -1) {\n                this.absoluteEntries.splice(i, 1);\n                if (name)\n                    delete this.entriesNameMap[name];\n                removed = true;\n            }\n        }\n        for (var i = this.relativeEntries.length - 1; i >= 0; i--) {\n            var _b = this.relativeEntries[i], tags = _b.tags, name = _b.name;\n            if (tags && tags.indexOf(toRemove) > -1) {\n                this.relativeEntries.splice(i, 1);\n                if (name)\n                    delete this.entriesNameMap[name];\n                removed = true;\n            }\n        }\n        return removed;\n    };\n    MiddlewareStack.prototype.use = function (plugin) {\n        plugin.applyToStack(this);\n    };\n    /**\n     * Resolve relative middleware entries to multiple double linked lists\n     * depicting the relative location of middleware. Only middleware that have\n     * direct or transitive relation will form a linked list.\n     *\n     * This function normalizes relative middleware into 2 categories of linked\n     * lists. (1) linked list that have absolute-located middleware on one end.\n     * These middleware will be resolved accordingly before or after the absolute-\n     * located middleware. (2) Linked list that have no absolute-located middleware\n     * on any end. They will be resolved to corresponding step with normal priority\n     *\n     * The 2 types of linked list will return as a tuple\n     */\n    MiddlewareStack.prototype.normalizeRelativeEntries = function () {\n        var e_1, _a;\n        var absoluteMiddlewareNamesMap = this.absoluteEntries\n            .filter(function (entry) { return entry.name; })\n            .reduce(function (accumulator, entry) {\n            accumulator[entry.name] = entry;\n            return accumulator;\n        }, {});\n        var normalized = this.relativeEntries.map(function (entry) {\n            return (tslib_1.__assign(tslib_1.__assign({}, entry), { priority: null, next: undefined, prev: undefined }));\n        });\n        var relativeMiddlewareNamesMap = normalized\n            .filter(function (entry) { return entry.name; })\n            .reduce(function (accumulator, entry) {\n            accumulator[entry.name] = entry;\n            return accumulator;\n        }, {});\n        var anchors = {};\n        for (var i = 0; i < this.relativeEntries.length; i++) {\n            var _b = this.relativeEntries[i], prev = _b.prev, next = _b.next;\n            var resolvedCurr = normalized[i];\n            //either prev or next is set\n            if (prev) {\n                if (absoluteMiddlewareNamesMap[prev] && absoluteMiddlewareNamesMap[prev].step === resolvedCurr.step) {\n                    if (!anchors[prev])\n                        anchors[prev] = {};\n                    resolvedCurr.next = anchors[prev].next;\n                    if (anchors[prev].next)\n                        anchors[prev].next.prev = resolvedCurr;\n                    anchors[prev].next = resolvedCurr;\n                }\n                else if (relativeMiddlewareNamesMap[prev] && relativeMiddlewareNamesMap[prev].step === resolvedCurr.step) {\n                    var resolvedPrev = relativeMiddlewareNamesMap[prev];\n                    if (resolvedPrev.next === resolvedCurr)\n                        continue;\n                    resolvedCurr.next = resolvedPrev.next;\n                    resolvedPrev.next = resolvedCurr;\n                    if (resolvedCurr.next)\n                        resolvedCurr.next.prev = resolvedCurr;\n                    resolvedCurr.prev = resolvedPrev;\n                }\n            }\n            else if (next) {\n                if (absoluteMiddlewareNamesMap[next] && absoluteMiddlewareNamesMap[next].step === resolvedCurr.step) {\n                    if (!anchors[next])\n                        anchors[next] = {};\n                    resolvedCurr.prev = anchors[next].prev;\n                    if (anchors[next].prev)\n                        anchors[next].prev.next = resolvedCurr;\n                    anchors[next].prev = resolvedCurr;\n                }\n                else if (relativeMiddlewareNamesMap[next] && relativeMiddlewareNamesMap[next].step === resolvedCurr.step) {\n                    var resolvedNext = relativeMiddlewareNamesMap[next];\n                    if (resolvedNext.prev === resolvedCurr)\n                        continue;\n                    resolvedCurr.prev = resolvedNext.prev;\n                    resolvedNext.prev = resolvedCurr;\n                    if (resolvedCurr.prev)\n                        resolvedCurr.prev.next = resolvedCurr;\n                    resolvedCurr.next = resolvedNext;\n                }\n            }\n        }\n        // get the head of the relative middleware linked list that have\n        // no transitive relation to absolute middleware.\n        var orphanedRelativeEntries = [];\n        var visited = new WeakSet();\n        try {\n            for (var _c = tslib_1.__values(Object.keys(anchors)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var anchorName = _d.value;\n                var _e = anchors[anchorName], prev = _e.prev, next = _e.next;\n                while (prev) {\n                    visited.add(prev);\n                    prev = prev.prev;\n                }\n                while (next) {\n                    visited.add(next);\n                    next = next.next;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        for (var i = 0; i < normalized.length; i++) {\n            var entry = normalized[i];\n            if (visited.has(entry))\n                continue;\n            if (!entry.prev)\n                orphanedRelativeEntries.push(entry);\n            while (entry && !visited.has(entry)) {\n                visited.add(entry);\n                entry = entry.next;\n            }\n        }\n        return [orphanedRelativeEntries, anchors];\n    };\n    /**\n     * Get a final list of middleware in the order of being executed in the resolved handler.\n     * If relative entries list is not empty, those entries will be added to final middleware\n     * list with rules below:\n     * 1. if `toMiddleware` exists in the specific `step`, the middleware will be inserted before\n     *     or after the specified `toMiddleware`\n     * 2. if `toMiddleware` doesn't exist in the specific `step`, the middleware will be appended\n     *     to specific `step` with priority of `normal`\n     */\n    MiddlewareStack.prototype.getMiddlewareList = function () {\n        var e_2, _a;\n        var middlewareList = [];\n        var _b = tslib_1.__read(this.normalizeRelativeEntries(), 2), orphanedRelativeEntries = _b[0], anchors = _b[1];\n        var entryList = tslib_1.__spread(this.absoluteEntries, orphanedRelativeEntries);\n        entryList = this.sort(entryList);\n        try {\n            for (var entryList_1 = tslib_1.__values(entryList), entryList_1_1 = entryList_1.next(); !entryList_1_1.done; entryList_1_1 = entryList_1.next()) {\n                var entry = entryList_1_1.value;\n                var defaultAnchorValue = { prev: undefined, next: undefined };\n                var _c = entry.name ? anchors[entry.name] || defaultAnchorValue : defaultAnchorValue, prev = _c.prev, next = _c.next;\n                var relativeEntry = prev;\n                //reverse relative entry linked list and add to ordered handler list\n                while (relativeEntry === null || relativeEntry === void 0 ? void 0 : relativeEntry.prev) {\n                    relativeEntry = relativeEntry.prev;\n                }\n                while (relativeEntry) {\n                    middlewareList.push(relativeEntry.middleware);\n                    relativeEntry = relativeEntry.next;\n                }\n                middlewareList.push(entry.middleware);\n                var orphanedEntry = entry;\n                while (orphanedEntry.next) {\n                    middlewareList.push(orphanedEntry.next.middleware);\n                    orphanedEntry = orphanedEntry.next;\n                }\n                relativeEntry = next;\n                while (relativeEntry) {\n                    middlewareList.push(relativeEntry.middleware);\n                    relativeEntry = relativeEntry.next;\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (entryList_1_1 && !entryList_1_1.done && (_a = entryList_1.return)) _a.call(entryList_1);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return middlewareList.reverse();\n    };\n    MiddlewareStack.prototype.resolve = function (handler, context) {\n        var e_3, _a;\n        try {\n            for (var _b = tslib_1.__values(this.getMiddlewareList()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var middleware = _c.value;\n                handler = middleware(handler, context);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return handler;\n    };\n    return MiddlewareStack;\n}());\nexports.MiddlewareStack = MiddlewareStack;\nvar stepWeights = {\n    initialize: 5,\n    serialize: 4,\n    build: 3,\n    finalizeRequest: 2,\n    deserialize: 1,\n};\nvar priorityWeights = {\n    high: 3,\n    normal: 2,\n    low: 1,\n};\n"},"sourceMaps":{"js":{"version":3,"file":"MiddlewareStack.js","sourceRoot":"","sources":["../../src/MiddlewareStack.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  AbsoluteLocation,\n  BuildHandlerOptions,\n  BuildMiddleware,\n  DeserializeHandler,\n  DeserializeHandlerOptions,\n  DeserializeMiddleware,\n  FinalizeRequestHandlerOptions,\n  FinalizeRequestMiddleware,\n  Handler,\n  HandlerExecutionContext,\n  HandlerOptions,\n  InitializeHandlerOptions,\n  InitializeMiddleware,\n  MiddlewareStack as IMiddlewareStack,\n  MiddlewareType,\n  Pluggable,\n  Priority,\n  RelativeLocation,\n  SerializeHandlerOptions,\n  SerializeMiddleware,\n  Step,\n} from \"@aws-sdk/types\";\n\nimport {\n  MiddlewareEntry,\n  NamedMiddlewareEntriesMap,\n  NamedRelativeEntriesMap,\n  NormalizedRelativeEntry,\n  NormalizingEntryResult,\n  RelativeMiddlewareAnchor,\n  RelativeMiddlewareEntry,\n} from \"./types\";\n\nexport interface MiddlewareStack<Input extends object, Output extends object> extends IMiddlewareStack<Input, Output> {}\n\nexport class MiddlewareStack<Input extends object, Output extends object> {\n  private readonly absoluteEntries: Array<MiddlewareEntry<Input, Output>> = [];\n  private readonly relativeEntries: Array<RelativeMiddlewareEntry<Input, Output>> = [];\n  private entriesNameMap: {\n    [middlewareName: string]: MiddlewareEntry<Input, Output> | RelativeMiddlewareEntry<Input, Output>;\n  } = {};\n\n  add(middleware: InitializeMiddleware<Input, Output>, options?: InitializeHandlerOptions & AbsoluteLocation): void;\n\n  add(middleware: SerializeMiddleware<Input, Output>, options: SerializeHandlerOptions & AbsoluteLocation): void;\n\n  add(middleware: BuildMiddleware<Input, Output>, options: BuildHandlerOptions & AbsoluteLocation): void;\n\n  add(\n    middleware: FinalizeRequestMiddleware<Input, Output>,\n    options: FinalizeRequestHandlerOptions & AbsoluteLocation\n  ): void;\n\n  add(middleware: DeserializeMiddleware<Input, Output>, options: DeserializeHandlerOptions & AbsoluteLocation): void;\n\n  add(middleware: MiddlewareType<Input, Output>, options: HandlerOptions & AbsoluteLocation = {}): void {\n    const { name, step = \"initialize\", tags, priority = \"normal\" } = options;\n    const entry: MiddlewareEntry<Input, Output> = {\n      name,\n      step,\n      tags,\n      priority,\n      middleware,\n    };\n    if (name) {\n      if (Object.prototype.hasOwnProperty.call(this.entriesNameMap, name)) {\n        throw new Error(`Duplicated middleware name '${name}'`);\n      }\n      this.entriesNameMap[name] = entry;\n    }\n    this.absoluteEntries.push(entry);\n  }\n\n  addRelativeTo(\n    middleware: InitializeMiddleware<Input, Output>,\n    options: InitializeHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: SerializeMiddleware<Input, Output>,\n    options: SerializeHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: BuildMiddleware<Input, Output>,\n    options: BuildHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: FinalizeRequestMiddleware<Input, Output>,\n    options: FinalizeRequestHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: DeserializeMiddleware<Input, Output>,\n    options: DeserializeHandlerOptions & RelativeLocation<Input, Output>\n  ): void;\n\n  addRelativeTo(\n    middleware: MiddlewareType<Input, Output>,\n    options: HandlerOptions & RelativeLocation<Input, Output>\n  ): void {\n    const { step = \"initialize\", name, tags, relation, toMiddleware } = options;\n    const entry: RelativeMiddlewareEntry<Input, Output> = {\n      middleware,\n      step,\n      name,\n      tags,\n      next: relation === \"before\" ? toMiddleware : undefined,\n      prev: relation === \"after\" ? toMiddleware : undefined,\n    };\n    if (name) {\n      if (Object.prototype.hasOwnProperty.call(this.entriesNameMap, name)) {\n        throw new Error(`Duplicated middleware name '${name}'`);\n      }\n      this.entriesNameMap[name] = entry;\n    }\n    this.relativeEntries.push(entry);\n  }\n\n  private sort(\n    entries: Array<MiddlewareEntry<Input, Output> | NormalizedRelativeEntry<Input, Output>>\n  ): Array<MiddlewareEntry<Input, Output> | NormalizedRelativeEntry<Input, Output>> {\n    //reverse before sorting so that middleware of same step will execute in\n    //the order of being added\n    return entries.sort(\n      (a, b) =>\n        stepWeights[b.step] - stepWeights[a.step] ||\n        priorityWeights[b.priority || \"normal\"] - priorityWeights[a.priority || \"normal\"]\n    );\n  }\n\n  clone(): IMiddlewareStack<Input, Output> {\n    const clone = new MiddlewareStack<Input, Output>();\n    clone.absoluteEntries.push(...this.absoluteEntries);\n    clone.relativeEntries.push(...this.relativeEntries);\n    clone.entriesNameMap = { ...this.entriesNameMap };\n    return clone;\n  }\n\n  concat<InputType extends Input, OutputType extends Output>(\n    from: IMiddlewareStack<InputType, OutputType>\n  ): MiddlewareStack<InputType, OutputType> {\n    const clone = new MiddlewareStack<InputType, OutputType>();\n    clone.entriesNameMap = { ...(this.entriesNameMap as any) };\n    // IMiddlewareStack interface doesn't contain private members variables\n    // like `entriesNameMap`, but in fact the function expects `MiddlewareStack`\n    // class instance. So here we cast it.\n    const _from = from as MiddlewareStack<InputType, OutputType>;\n    for (const name in _from.entriesNameMap) {\n      if (clone.entriesNameMap[name]) {\n        throw new Error(`Duplicated middleware name '${name}'`);\n      }\n      clone.entriesNameMap[name] = _from.entriesNameMap[name];\n    }\n    clone.absoluteEntries.push(...(this.absoluteEntries as any), ..._from.absoluteEntries);\n    clone.relativeEntries.push(...(this.relativeEntries as any), ..._from.relativeEntries);\n    return clone;\n  }\n\n  remove(toRemove: MiddlewareType<Input, Output> | string): boolean {\n    if (typeof toRemove === \"string\") return this.removeByName(toRemove);\n    else return this.removeByReference(toRemove);\n  }\n\n  private removeByName(toRemove: string): boolean {\n    for (let i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      if (this.absoluteEntries[i].name && this.absoluteEntries[i].name === toRemove) {\n        this.absoluteEntries.splice(i, 1);\n        delete this.entriesNameMap[toRemove];\n        return true;\n      }\n    }\n    for (let i = this.relativeEntries.length - 1; i >= 0; i--) {\n      if (this.relativeEntries[i].name && this.relativeEntries[i].name === toRemove) {\n        this.relativeEntries.splice(i, 1);\n        delete this.entriesNameMap[toRemove];\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private removeByReference(toRemove: MiddlewareType<Input, Output>): boolean {\n    for (let i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      if (this.absoluteEntries[i].middleware === toRemove) {\n        const { name } = this.absoluteEntries[i];\n        if (name) delete this.entriesNameMap[name];\n        this.absoluteEntries.splice(i, 1);\n        return true;\n      }\n    }\n    for (let i = this.relativeEntries.length - 1; i >= 0; i--) {\n      if (this.relativeEntries[i].middleware === toRemove) {\n        const { name } = this.relativeEntries[i];\n        if (name) delete this.entriesNameMap[name];\n        this.relativeEntries.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  removeByTag(toRemove: string): boolean {\n    let removed = false;\n    for (let i = this.absoluteEntries.length - 1; i >= 0; i--) {\n      const { tags, name } = this.absoluteEntries[i];\n      if (tags && tags.indexOf(toRemove) > -1) {\n        this.absoluteEntries.splice(i, 1);\n        if (name) delete this.entriesNameMap[name];\n        removed = true;\n      }\n    }\n    for (let i = this.relativeEntries.length - 1; i >= 0; i--) {\n      const { tags, name } = this.relativeEntries[i];\n      if (tags && tags.indexOf(toRemove) > -1) {\n        this.relativeEntries.splice(i, 1);\n        if (name) delete this.entriesNameMap[name];\n        removed = true;\n      }\n    }\n    return removed;\n  }\n\n  use(plugin: Pluggable<Input, Output>) {\n    plugin.applyToStack(this);\n  }\n\n  /**\n   * Resolve relative middleware entries to multiple double linked lists\n   * depicting the relative location of middleware. Only middleware that have\n   * direct or transitive relation will form a linked list.\n   *\n   * This function normalizes relative middleware into 2 categories of linked\n   * lists. (1) linked list that have absolute-located middleware on one end.\n   * These middleware will be resolved accordingly before or after the absolute-\n   * located middleware. (2) Linked list that have no absolute-located middleware\n   * on any end. They will be resolved to corresponding step with normal priority\n   *\n   * The 2 types of linked list will return as a tuple\n   */\n  private normalizeRelativeEntries(): NormalizingEntryResult<Input, Output> {\n    const absoluteMiddlewareNamesMap = this.absoluteEntries\n      .filter((entry) => entry.name)\n      .reduce((accumulator, entry) => {\n        accumulator[entry.name!] = entry;\n        return accumulator;\n      }, {} as NamedMiddlewareEntriesMap<Input, Output>);\n    const normalized = this.relativeEntries.map(\n      (entry) =>\n        ({\n          ...entry,\n          priority: null,\n          next: undefined,\n          prev: undefined,\n        } as NormalizedRelativeEntry<Input, Output>)\n    );\n    const relativeMiddlewareNamesMap = normalized\n      .filter((entry) => entry.name)\n      .reduce((accumulator, entry) => {\n        accumulator[entry.name!] = entry;\n        return accumulator;\n      }, {} as NamedRelativeEntriesMap<Input, Output>);\n\n    const anchors: RelativeMiddlewareAnchor<Input, Output> = {};\n    for (let i = 0; i < this.relativeEntries.length; i++) {\n      const { prev, next } = this.relativeEntries[i];\n      const resolvedCurr = normalized[i];\n      //either prev or next is set\n      if (prev) {\n        if (absoluteMiddlewareNamesMap[prev] && absoluteMiddlewareNamesMap[prev].step === resolvedCurr.step) {\n          if (!anchors[prev]) anchors[prev] = {};\n          resolvedCurr.next = anchors[prev].next;\n          if (anchors[prev].next) anchors[prev].next!.prev = resolvedCurr;\n          anchors[prev].next = resolvedCurr;\n        } else if (relativeMiddlewareNamesMap[prev] && relativeMiddlewareNamesMap[prev].step === resolvedCurr.step) {\n          const resolvedPrev = relativeMiddlewareNamesMap[prev];\n          if (resolvedPrev.next === resolvedCurr) continue;\n          resolvedCurr.next = resolvedPrev.next;\n          resolvedPrev.next = resolvedCurr;\n          if (resolvedCurr.next) resolvedCurr.next.prev = resolvedCurr;\n          resolvedCurr.prev = resolvedPrev;\n        }\n      } else if (next) {\n        if (absoluteMiddlewareNamesMap[next] && absoluteMiddlewareNamesMap[next].step === resolvedCurr.step) {\n          if (!anchors[next]) anchors[next] = {};\n          resolvedCurr.prev = anchors[next].prev;\n          if (anchors[next].prev) anchors[next].prev!.next = resolvedCurr;\n          anchors[next].prev = resolvedCurr;\n        } else if (relativeMiddlewareNamesMap[next] && relativeMiddlewareNamesMap[next].step === resolvedCurr.step) {\n          const resolvedNext = relativeMiddlewareNamesMap[next];\n          if (resolvedNext.prev === resolvedCurr) continue;\n          resolvedCurr.prev = resolvedNext.prev;\n          resolvedNext.prev = resolvedCurr;\n          if (resolvedCurr.prev) resolvedCurr.prev.next = resolvedCurr;\n          resolvedCurr.next = resolvedNext;\n        }\n      }\n    }\n    // get the head of the relative middleware linked list that have\n    // no transitive relation to absolute middleware.\n    const orphanedRelativeEntries: Array<NormalizedRelativeEntry<Input, Output>> = [];\n    const visited: WeakSet<NormalizedRelativeEntry<Input, Output>> = new WeakSet();\n    for (const anchorName of Object.keys(anchors)) {\n      let { prev, next } = anchors[anchorName];\n      while (prev) {\n        visited.add(prev);\n        prev = prev.prev;\n      }\n      while (next) {\n        visited.add(next);\n        next = next.next;\n      }\n    }\n    for (let i = 0; i < normalized.length; i++) {\n      let entry: NormalizedRelativeEntry<Input, Output> | undefined = normalized[i];\n      if (visited.has(entry)) continue;\n      if (!entry.prev) orphanedRelativeEntries.push(entry);\n      while (entry && !visited.has(entry)) {\n        visited.add(entry);\n        entry = entry.next;\n      }\n    }\n    return [orphanedRelativeEntries, anchors];\n  }\n\n  /**\n   * Get a final list of middleware in the order of being executed in the resolved handler.\n   * If relative entries list is not empty, those entries will be added to final middleware\n   * list with rules below:\n   * 1. if `toMiddleware` exists in the specific `step`, the middleware will be inserted before\n   *     or after the specified `toMiddleware`\n   * 2. if `toMiddleware` doesn't exist in the specific `step`, the middleware will be appended\n   *     to specific `step` with priority of `normal`\n   */\n  private getMiddlewareList(): Array<MiddlewareType<Input, Output>> {\n    const middlewareList: Array<MiddlewareType<Input, Output>> = [];\n    const [orphanedRelativeEntries, anchors] = this.normalizeRelativeEntries();\n    let entryList = [...this.absoluteEntries, ...orphanedRelativeEntries];\n    entryList = this.sort(entryList);\n    for (const entry of entryList) {\n      const defaultAnchorValue = { prev: undefined, next: undefined };\n      const { prev, next } = entry.name ? anchors[entry.name] || defaultAnchorValue : defaultAnchorValue;\n      let relativeEntry = prev;\n      //reverse relative entry linked list and add to ordered handler list\n      while (relativeEntry?.prev) {\n        relativeEntry = relativeEntry.prev;\n      }\n      while (relativeEntry) {\n        middlewareList.push(relativeEntry.middleware);\n        relativeEntry = relativeEntry.next;\n      }\n      middlewareList.push(entry.middleware);\n      let orphanedEntry = entry as any;\n      while ((orphanedEntry as any).next) {\n        middlewareList.push((orphanedEntry as any).next.middleware);\n        orphanedEntry = (orphanedEntry as any).next;\n      }\n      relativeEntry = next;\n      while (relativeEntry) {\n        middlewareList.push(relativeEntry.middleware);\n        relativeEntry = relativeEntry.next;\n      }\n    }\n    return middlewareList.reverse();\n  }\n\n  resolve<InputType extends Input, OutputType extends Output>(\n    handler: DeserializeHandler<InputType, OutputType>,\n    context: HandlerExecutionContext\n  ): Handler<InputType, OutputType> {\n    for (const middleware of this.getMiddlewareList()) {\n      handler = middleware(handler as Handler<Input, OutputType>, context) as any;\n    }\n\n    return handler as Handler<InputType, OutputType>;\n  }\n}\n\nconst stepWeights: { [key in Step]: number } = {\n  initialize: 5,\n  serialize: 4,\n  build: 3,\n  finalizeRequest: 2,\n  deserialize: 1,\n};\n\nconst priorityWeights: { [key in Priority]: number } = {\n  high: 3,\n  normal: 2,\n  low: 1,\n};\n"]}},"error":null,"hash":"dc747b6fee899adbbec94a2ff1389b64","cacheData":{"env":{}}}