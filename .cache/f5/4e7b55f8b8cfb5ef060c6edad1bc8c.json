{"id":"node_modules/@aws-sdk/middleware-retry/dist/cjs/delayDecider.js","dependencies":[{"name":"/Users/spittela/code/giphlify/package.json","includedInParent":true,"mtime":1600722302325},{"name":"/Users/spittela/code/giphlify/.babelrc","includedInParent":true,"mtime":1599669969128},{"name":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/package.json","includedInParent":true,"mtime":1600722667342},{"name":"./constants","loc":{"line":4,"column":26},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/delayDecider.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/constants.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultDelayDecider = void 0;\nvar constants_1 = require(\"./constants\");\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexports.defaultDelayDecider = function (delayBase, attempts) {\n    return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * Math.pow(2, attempts) * delayBase));\n};\n"},"sourceMaps":{"js":{"version":3,"file":"delayDecider.js","sourceRoot":"","sources":["../../src/delayDecider.ts"],"names":[],"mappings":";;;AAAA,yCAAkD;AAElD;;GAEG;AACU,QAAA,mBAAmB,GAAG,UAAC,SAAiB,EAAE,QAAgB;IACrE,OAAA,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,+BAAmB,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,SAAA,CAAC,EAAI,QAAQ,CAAA,GAAG,SAAS,CAAC,CAAC;AAApF,CAAoF,CAAC","sourcesContent":["import { MAXIMUM_RETRY_DELAY } from \"./constants\";\n\n/**\n * Calculate a capped, fully-jittered exponential backoff time.\n */\nexport const defaultDelayDecider = (delayBase: number, attempts: number) =>\n  Math.floor(Math.min(MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));\n"]}},"error":null,"hash":"dba551a43b5cc5e29a23af650e24954a","cacheData":{"env":{}}}