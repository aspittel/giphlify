{"id":"node_modules/@aws-sdk/protocol-http/dist/cjs/httpRequest.js","dependencies":[{"name":"/Users/spittela/code/giphlify/package.json","includedInParent":true,"mtime":1600722302325},{"name":"/Users/spittela/code/giphlify/.babelrc","includedInParent":true,"mtime":1599669969128},{"name":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/protocol-http/package.json","includedInParent":true,"mtime":1600722667590},{"name":"tslib","loc":{"line":4,"column":22},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/protocol-http/dist/cjs/httpRequest.js","resolved":"/Users/spittela/code/giphlify/node_modules/tslib/tslib.es6.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.HttpRequest = void 0;\nvar tslib_1 = require(\"tslib\");\nvar HttpRequest = /** @class */ (function () {\n    function HttpRequest(options) {\n        this.method = options.method || \"GET\";\n        this.hostname = options.hostname || \"localhost\";\n        this.port = options.port;\n        this.query = options.query || {};\n        this.headers = options.headers || {};\n        this.body = options.body;\n        this.protocol = options.protocol\n            ? options.protocol.substr(-1) !== \":\"\n                ? options.protocol + \":\"\n                : options.protocol\n            : \"https:\";\n        this.path = options.path ? (options.path.charAt(0) !== \"/\" ? \"/\" + options.path : options.path) : \"/\";\n    }\n    HttpRequest.isInstance = function (request) {\n        //determine if request is a valid httpRequest\n        if (!request)\n            return false;\n        var req = request;\n        return (\"method\" in req &&\n            \"protocol\" in req &&\n            \"hostname\" in req &&\n            \"path\" in req &&\n            typeof req[\"query\"] === \"object\" &&\n            typeof req[\"headers\"] === \"object\");\n    };\n    HttpRequest.prototype.clone = function () {\n        var cloned = new HttpRequest(tslib_1.__assign(tslib_1.__assign({}, this), { headers: tslib_1.__assign({}, this.headers) }));\n        if (cloned.query)\n            cloned.query = cloneQuery(cloned.query);\n        return cloned;\n    };\n    return HttpRequest;\n}());\nexports.HttpRequest = HttpRequest;\nfunction cloneQuery(query) {\n    return Object.keys(query).reduce(function (carry, paramName) {\n        var _a;\n        var param = query[paramName];\n        return tslib_1.__assign(tslib_1.__assign({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? tslib_1.__spread(param) : param, _a));\n    }, {});\n}\n"},"sourceMaps":{"js":{"version":3,"file":"httpRequest.js","sourceRoot":"","sources":["../../src/httpRequest.ts"],"names":[],"mappings":";;;;AAMA;IAUE,qBAAY,OAA2B;QACrC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC;QACtC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,WAAW,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;QACrC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ;YAC9B,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG;gBACnC,CAAC,CAAI,OAAO,CAAC,QAAQ,MAAG;gBACxB,CAAC,CAAC,OAAO,CAAC,QAAQ;YACpB,CAAC,CAAC,QAAQ,CAAC;QACb,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,MAAI,OAAO,CAAC,IAAM,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACxG,CAAC;IAEM,sBAAU,GAAjB,UAAkB,OAAgB;QAChC,6CAA6C;QAC7C,IAAI,CAAC,OAAO;YAAE,OAAO,KAAK,CAAC;QAC3B,IAAM,GAAG,GAAQ,OAAO,CAAC;QACzB,OAAO,CACL,QAAQ,IAAI,GAAG;YACf,UAAU,IAAI,GAAG;YACjB,UAAU,IAAI,GAAG;YACjB,MAAM,IAAI,GAAG;YACb,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,QAAQ;YAChC,OAAO,GAAG,CAAC,SAAS,CAAC,KAAK,QAAQ,CACnC,CAAC;IACJ,CAAC;IAED,2BAAK,GAAL;QACE,IAAM,MAAM,GAAG,IAAI,WAAW,uCACzB,IAAI,KACP,OAAO,uBAAO,IAAI,CAAC,OAAO,KAC1B,CAAC;QACH,IAAI,MAAM,CAAC,KAAK;YAAE,MAAM,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC1D,OAAO,MAAM,CAAC;IAChB,CAAC;IACH,kBAAC;AAAD,CAAC,AA/CD,IA+CC;AA/CY,kCAAW;AAiDxB,SAAS,UAAU,CAAC,KAAwB;IAC1C,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,UAAC,KAAwB,EAAE,SAAiB;;QAC3E,IAAM,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,CAAC;QAC/B,6CACK,KAAK,gBACP,SAAS,IAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,kBAAK,KAAK,EAAE,CAAC,CAAC,KAAK,OACtD;IACJ,CAAC,EAAE,EAAE,CAAC,CAAC;AACT,CAAC","sourcesContent":["import { Endpoint, HeaderBag, HttpMessage, HttpRequest as IHttpRequest,QueryParameterBag } from \"@aws-sdk/types\";\n\ntype HttpRequestOptions = Partial<HttpMessage> & Partial<Endpoint> & { method?: string };\n\nexport interface HttpRequest extends IHttpRequest {}\n\nexport class HttpRequest implements HttpMessage, Endpoint {\n  public method: string;\n  public protocol: string;\n  public hostname: string;\n  public port?: number;\n  public path: string;\n  public query: QueryParameterBag;\n  public headers: HeaderBag;\n  public body?: any;\n\n  constructor(options: HttpRequestOptions) {\n    this.method = options.method || \"GET\";\n    this.hostname = options.hostname || \"localhost\";\n    this.port = options.port;\n    this.query = options.query || {};\n    this.headers = options.headers || {};\n    this.body = options.body;\n    this.protocol = options.protocol\n      ? options.protocol.substr(-1) !== \":\"\n        ? `${options.protocol}:`\n        : options.protocol\n      : \"https:\";\n    this.path = options.path ? (options.path.charAt(0) !== \"/\" ? `/${options.path}` : options.path) : \"/\";\n  }\n\n  static isInstance(request: unknown): request is HttpRequest {\n    //determine if request is a valid httpRequest\n    if (!request) return false;\n    const req: any = request;\n    return (\n      \"method\" in req &&\n      \"protocol\" in req &&\n      \"hostname\" in req &&\n      \"path\" in req &&\n      typeof req[\"query\"] === \"object\" &&\n      typeof req[\"headers\"] === \"object\"\n    );\n  }\n\n  clone(): HttpRequest {\n    const cloned = new HttpRequest({\n      ...this,\n      headers: { ...this.headers },\n    });\n    if (cloned.query) cloned.query = cloneQuery(cloned.query);\n    return cloned;\n  }\n}\n\nfunction cloneQuery(query: QueryParameterBag): QueryParameterBag {\n  return Object.keys(query).reduce((carry: QueryParameterBag, paramName: string) => {\n    const param = query[paramName];\n    return {\n      ...carry,\n      [paramName]: Array.isArray(param) ? [...param] : param,\n    };\n  }, {});\n}\n"]}},"error":null,"hash":"27ebf2f6a98f1bf46e6e1be9f60a6df4","cacheData":{"env":{}}}