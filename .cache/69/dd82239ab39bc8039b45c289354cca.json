{"id":"node_modules/@aws-sdk/fetch-http-handler/dist/cjs/stream-collector.js","dependencies":[{"name":"/Users/spittela/code/giphlify/package.json","includedInParent":true,"mtime":1600722302325},{"name":"/Users/spittela/code/giphlify/.babelrc","includedInParent":true,"mtime":1599669969128},{"name":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/fetch-http-handler/package.json","includedInParent":true,"mtime":1600722667518},{"name":"tslib","loc":{"line":4,"column":22},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/fetch-http-handler/dist/cjs/stream-collector.js","resolved":"/Users/spittela/code/giphlify/node_modules/tslib/tslib.es6.js"},{"name":"@aws-sdk/util-base64-browser","loc":{"line":5,"column":36},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/fetch-http-handler/dist/cjs/stream-collector.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/util-base64-browser/dist/cjs/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.streamCollector = void 0;\nvar tslib_1 = require(\"tslib\");\nvar util_base64_browser_1 = require(\"@aws-sdk/util-base64-browser\");\n//reference: https://snack.expo.io/r1JCSWRGU\nexports.streamCollector = function (stream) {\n    if (stream instanceof Blob) {\n        return collectBlob(stream);\n    }\n    return collectStream(stream);\n};\nfunction collectBlob(blob) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var base64, arrayBuffer;\n        return tslib_1.__generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, readToBase64(blob)];\n                case 1:\n                    base64 = _a.sent();\n                    arrayBuffer = util_base64_browser_1.fromBase64(base64);\n                    return [2 /*return*/, new Uint8Array(arrayBuffer)];\n            }\n        });\n    });\n}\nfunction collectStream(stream) {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n        var res, reader, isDone, _a, done, value, prior;\n        return tslib_1.__generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    res = new Uint8Array(0);\n                    reader = stream.getReader();\n                    isDone = false;\n                    _b.label = 1;\n                case 1:\n                    if (!!isDone) return [3 /*break*/, 3];\n                    return [4 /*yield*/, reader.read()];\n                case 2:\n                    _a = _b.sent(), done = _a.done, value = _a.value;\n                    if (value) {\n                        prior = res;\n                        res = new Uint8Array(prior.length + value.length);\n                        res.set(prior);\n                        res.set(value, prior.length);\n                    }\n                    isDone = done;\n                    return [3 /*break*/, 1];\n                case 3: return [2 /*return*/, res];\n            }\n        });\n    });\n}\nfunction readToBase64(blob) {\n    return new Promise(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onloadend = function () {\n            var _a;\n            // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n            // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n            if (reader.readyState !== 2) {\n                return reject(new Error(\"Reader aborted too early\"));\n            }\n            var result = ((_a = reader.result) !== null && _a !== void 0 ? _a : \"\");\n            // Response can include only 'data:' for empty blob, return empty string in this case.\n            // Otherwise, return the string after ','\n            var commaIndex = result.indexOf(\",\");\n            var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n            resolve(result.substring(dataOffset));\n        };\n        reader.onabort = function () { return reject(new Error(\"Read aborted\")); };\n        reader.onerror = function () { return reject(reader.error); };\n        // reader.readAsArrayBuffer is not always available\n        reader.readAsDataURL(blob);\n    });\n}\n"},"sourceMaps":{"js":{"version":3,"file":"stream-collector.js","sourceRoot":"","sources":["../../src/stream-collector.ts"],"names":[],"mappings":";;;;AACA,oEAA0D;AAE1D,4CAA4C;AAC/B,QAAA,eAAe,GAAoB,UAAC,MAA6B;IAC5E,IAAI,MAAM,YAAY,IAAI,EAAE;QAC1B,OAAO,WAAW,CAAC,MAAM,CAAC,CAAC;KAC5B;IAED,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC;AAC/B,CAAC,CAAC;AAEF,SAAe,WAAW,CAAC,IAAU;;;;;wBACpB,qBAAM,YAAY,CAAC,IAAI,CAAC,EAAA;;oBAAjC,MAAM,GAAG,SAAwB;oBACjC,WAAW,GAAG,gCAAU,CAAC,MAAM,CAAC,CAAC;oBACvC,sBAAO,IAAI,UAAU,CAAC,WAAW,CAAC,EAAC;;;;CACpC;AAED,SAAe,aAAa,CAAC,MAAsB;;;;;;oBAC7C,GAAG,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;oBACtB,MAAM,GAAG,MAAM,CAAC,SAAS,EAAE,CAAC;oBAC9B,MAAM,GAAG,KAAK,CAAC;;;yBACZ,CAAC,MAAM;oBACY,qBAAM,MAAM,CAAC,IAAI,EAAE,EAAA;;oBAArC,KAAkB,SAAmB,EAAnC,IAAI,UAAA,EAAE,KAAK,WAAA;oBACnB,IAAI,KAAK,EAAE;wBACH,KAAK,GAAG,GAAG,CAAC;wBAClB,GAAG,GAAG,IAAI,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC;wBAClD,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;wBACf,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;qBAC9B;oBACD,MAAM,GAAG,IAAI,CAAC;;wBAEhB,sBAAO,GAAG,EAAC;;;;CACZ;AAED,SAAS,YAAY,CAAC,IAAU;IAC9B,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QACjC,IAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,SAAS,GAAG;;YACjB,uFAAuF;YACvF,0EAA0E;YAC1E,IAAI,MAAM,CAAC,UAAU,KAAK,CAAC,EAAE;gBAC3B,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC;aACtD;YACD,IAAM,MAAM,GAAG,OAAC,MAAM,CAAC,MAAM,mCAAI,EAAE,CAAW,CAAC;YAC/C,sFAAsF;YACtF,yCAAyC;YACzC,IAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACvC,IAAM,UAAU,GAAG,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;YACpE,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;QACxC,CAAC,CAAC;QACF,MAAM,CAAC,OAAO,GAAG,cAAM,OAAA,MAAM,CAAC,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC,EAAjC,CAAiC,CAAC;QACzD,MAAM,CAAC,OAAO,GAAG,cAAM,OAAA,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAApB,CAAoB,CAAC;QAC5C,mDAAmD;QACnD,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["import { StreamCollector } from \"@aws-sdk/types\";\nimport { fromBase64 } from \"@aws-sdk/util-base64-browser\";\n\n//reference: https://snack.expo.io/r1JCSWRGU\nexport const streamCollector: StreamCollector = (stream: Blob | ReadableStream): Promise<Uint8Array> => {\n  if (stream instanceof Blob) {\n    return collectBlob(stream);\n  }\n\n  return collectStream(stream);\n};\n\nasync function collectBlob(blob: Blob): Promise<Uint8Array> {\n  const base64 = await readToBase64(blob);\n  const arrayBuffer = fromBase64(base64);\n  return new Uint8Array(arrayBuffer);\n}\n\nasync function collectStream(stream: ReadableStream): Promise<Uint8Array> {\n  let res = new Uint8Array(0);\n  const reader = stream.getReader();\n  let isDone = false;\n  while (!isDone) {\n    const { done, value } = await reader.read();\n    if (value) {\n      const prior = res;\n      res = new Uint8Array(prior.length + value.length);\n      res.set(prior);\n      res.set(value, prior.length);\n    }\n    isDone = done;\n  }\n  return res;\n}\n\nfunction readToBase64(blob: Blob): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n      // response from readAsDataURL is always prepended with \"data:*/*;base64,\"\n      if (reader.readyState !== 2) {\n        return reject(new Error(\"Reader aborted too early\"));\n      }\n      const result = (reader.result ?? \"\") as string;\n      // Response can include only 'data:' for empty blob, return empty string in this case.\n      // Otherwise, return the string after ','\n      const commaIndex = result.indexOf(\",\");\n      const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;\n      resolve(result.substring(dataOffset));\n    };\n    reader.onabort = () => reject(new Error(\"Read aborted\"));\n    reader.onerror = () => reject(reader.error);\n    // reader.readAsArrayBuffer is not always available\n    reader.readAsDataURL(blob);\n  });\n}\n"]}},"error":null,"hash":"08416b91b644886a8bd929861652cb2c","cacheData":{"env":{}}}