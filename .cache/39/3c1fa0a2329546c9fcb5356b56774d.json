{"id":"node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","dependencies":[{"name":"/Users/spittela/code/giphlify/package.json","includedInParent":true,"mtime":1600722302325},{"name":"/Users/spittela/code/giphlify/.babelrc","includedInParent":true,"mtime":1599669969128},{"name":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/package.json","includedInParent":true,"mtime":1600722667342},{"name":"tslib","loc":{"line":4,"column":22},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","resolved":"/Users/spittela/code/giphlify/node_modules/tslib/tslib.es6.js"},{"name":"@aws-sdk/protocol-http","loc":{"line":5,"column":30},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/protocol-http/dist/cjs/index.js"},{"name":"@aws-sdk/service-error-classification","loc":{"line":6,"column":45},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/service-error-classification/dist/cjs/index.js"},{"name":"uuid","loc":{"line":7,"column":21},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","resolved":"/Users/spittela/code/giphlify/node_modules/uuid/index.js"},{"name":"./constants","loc":{"line":8,"column":26},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/constants.js"},{"name":"./defaultRetryQuota","loc":{"line":9,"column":34},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultRetryQuota.js"},{"name":"./delayDecider","loc":{"line":10,"column":29},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/delayDecider.js"},{"name":"./retryDecider","loc":{"line":11,"column":29},"parent":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/defaultStrategy.js","resolved":"/Users/spittela/code/giphlify/node_modules/@aws-sdk/middleware-retry/dist/cjs/retryDecider.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StandardRetryStrategy = exports.DEFAULT_RETRY_MODE = exports.DEFAULT_MAX_ATTEMPTS = void 0;\nvar tslib_1 = require(\"tslib\");\nvar protocol_http_1 = require(\"@aws-sdk/protocol-http\");\nvar service_error_classification_1 = require(\"@aws-sdk/service-error-classification\");\nvar uuid_1 = require(\"uuid\");\nvar constants_1 = require(\"./constants\");\nvar defaultRetryQuota_1 = require(\"./defaultRetryQuota\");\nvar delayDecider_1 = require(\"./delayDecider\");\nvar retryDecider_1 = require(\"./retryDecider\");\n/**\n * The default value for how many HTTP requests an SDK should make for a\n * single SDK operation invocation before giving up\n */\nexports.DEFAULT_MAX_ATTEMPTS = \"3\";\n/**\n * The default retry algorithm to use.\n */\nexports.DEFAULT_RETRY_MODE = \"standard\";\nvar StandardRetryStrategy = /** @class */ (function () {\n    function StandardRetryStrategy(maxAttemptsProvider, options) {\n        var _a, _b, _c;\n        this.maxAttemptsProvider = maxAttemptsProvider;\n        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;\n        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;\n        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : defaultRetryQuota_1.getDefaultRetryQuota(constants_1.INITIAL_RETRY_TOKENS);\n    }\n    StandardRetryStrategy.prototype.shouldRetry = function (error, attempts, maxAttempts) {\n        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n    };\n    StandardRetryStrategy.prototype.getMaxAttempts = function () {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var maxAttemptsStr, error_1, maxAttempts;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        _a.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, this.maxAttemptsProvider()];\n                    case 1:\n                        maxAttemptsStr = _a.sent();\n                        return [3 /*break*/, 3];\n                    case 2:\n                        error_1 = _a.sent();\n                        maxAttemptsStr = exports.DEFAULT_MAX_ATTEMPTS;\n                        return [3 /*break*/, 3];\n                    case 3:\n                        maxAttempts = parseInt(maxAttemptsStr);\n                        return [2 /*return*/, Number.isNaN(maxAttempts) ? parseInt(exports.DEFAULT_MAX_ATTEMPTS) : maxAttempts];\n                }\n            });\n        });\n    };\n    StandardRetryStrategy.prototype.retry = function (next, args) {\n        return tslib_1.__awaiter(this, void 0, void 0, function () {\n            var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;\n            return tslib_1.__generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        attempts = 0;\n                        totalDelay = 0;\n                        return [4 /*yield*/, this.getMaxAttempts()];\n                    case 1:\n                        maxAttempts = _a.sent();\n                        request = args.request;\n                        if (protocol_http_1.HttpRequest.isInstance(request)) {\n                            request.headers[\"amz-sdk-invocation-id\"] = uuid_1.v4();\n                        }\n                        _loop_1 = function () {\n                            var _a, response, output, err_1, delay_1;\n                            return tslib_1.__generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        _b.trys.push([0, 2, , 5]);\n                                        if (protocol_http_1.HttpRequest.isInstance(request)) {\n                                            request.headers[\"amz-sdk-request\"] = \"attempt=\" + (attempts + 1) + \"; max=\" + maxAttempts;\n                                        }\n                                        return [4 /*yield*/, next(args)];\n                                    case 1:\n                                        _a = _b.sent(), response = _a.response, output = _a.output;\n                                        this_1.retryQuota.releaseRetryTokens(retryTokenAmount);\n                                        output.$metadata.attempts = attempts + 1;\n                                        output.$metadata.totalRetryDelay = totalDelay;\n                                        return [2 /*return*/, { value: { response: response, output: output } }];\n                                    case 2:\n                                        err_1 = _b.sent();\n                                        attempts++;\n                                        if (!this_1.shouldRetry(err_1, attempts, maxAttempts)) return [3 /*break*/, 4];\n                                        retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);\n                                        delay_1 = this_1.delayDecider(service_error_classification_1.isThrottlingError(err_1) ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE, attempts);\n                                        totalDelay += delay_1;\n                                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, delay_1); })];\n                                    case 3:\n                                        _b.sent();\n                                        return [2 /*return*/, \"continue\"];\n                                    case 4:\n                                        if (!err_1.$metadata) {\n                                            err_1.$metadata = {};\n                                        }\n                                        err_1.$metadata.attempts = attempts;\n                                        err_1.$metadata.totalRetryDelay = totalDelay;\n                                        throw err_1;\n                                    case 5: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _a.label = 2;\n                    case 2:\n                        if (!true) return [3 /*break*/, 4];\n                        return [5 /*yield**/, _loop_1()];\n                    case 3:\n                        state_1 = _a.sent();\n                        if (typeof state_1 === \"object\")\n                            return [2 /*return*/, state_1.value];\n                        return [3 /*break*/, 2];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return StandardRetryStrategy;\n}());\nexports.StandardRetryStrategy = StandardRetryStrategy;\n"},"sourceMaps":{"js":{"version":3,"file":"defaultStrategy.js","sourceRoot":"","sources":["../../src/defaultStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["import { HttpRequest } from \"@aws-sdk/protocol-http\";\nimport { isThrottlingError } from \"@aws-sdk/service-error-classification\";\nimport { SdkError } from \"@aws-sdk/smithy-client\";\nimport { FinalizeHandler, FinalizeHandlerArguments, MetadataBearer, Provider, RetryStrategy } from \"@aws-sdk/types\";\nimport { v4 } from \"uuid\";\n\nimport { DEFAULT_RETRY_DELAY_BASE, INITIAL_RETRY_TOKENS, THROTTLING_RETRY_DELAY_BASE } from \"./constants\";\nimport { getDefaultRetryQuota } from \"./defaultRetryQuota\";\nimport { defaultDelayDecider } from \"./delayDecider\";\nimport { defaultRetryDecider } from \"./retryDecider\";\n\n/**\n * The default value for how many HTTP requests an SDK should make for a\n * single SDK operation invocation before giving up\n */\nexport const DEFAULT_MAX_ATTEMPTS = \"3\";\n\n/**\n * The default retry algorithm to use.\n */\nexport const DEFAULT_RETRY_MODE = \"standard\";\n\n/**\n * Determines whether an error is retryable based on the number of retries\n * already attempted, the HTTP status code, and the error received (if any).\n *\n * @param error         The error encountered.\n */\nexport interface RetryDecider {\n  (error: SdkError): boolean;\n}\n\n/**\n * Determines the number of milliseconds to wait before retrying an action.\n *\n * @param delayBase The base delay (in milliseconds).\n * @param attempts  The number of times the action has already been tried.\n */\nexport interface DelayDecider {\n  (delayBase: number, attempts: number): number;\n}\n\n/**\n * Interface that specifies the retry quota behavior.\n */\nexport interface RetryQuota {\n  /**\n   * returns true if retry tokens are available from the retry quota bucket.\n   */\n  hasRetryTokens: (error: SdkError) => boolean;\n\n  /**\n   * returns token amount from the retry quota bucket.\n   * throws error is retry tokens are not available.\n   */\n  retrieveRetryTokens: (error: SdkError) => number;\n\n  /**\n   * releases tokens back to the retry quota.\n   */\n  releaseRetryTokens: (releaseCapacityAmount?: number) => void;\n}\n\n/**\n * Strategy options to be passed to StandardRetryStrategy\n */\nexport interface StandardRetryStrategyOptions {\n  retryDecider?: RetryDecider;\n  delayDecider?: DelayDecider;\n  retryQuota?: RetryQuota;\n}\n\nexport class StandardRetryStrategy implements RetryStrategy {\n  private retryDecider: RetryDecider;\n  private delayDecider: DelayDecider;\n  private retryQuota: RetryQuota;\n\n  constructor(private readonly maxAttemptsProvider: Provider<string>, options?: StandardRetryStrategyOptions) {\n    this.retryDecider = options?.retryDecider ?? defaultRetryDecider;\n    this.delayDecider = options?.delayDecider ?? defaultDelayDecider;\n    this.retryQuota = options?.retryQuota ?? getDefaultRetryQuota(INITIAL_RETRY_TOKENS);\n  }\n\n  private shouldRetry(error: SdkError, attempts: number, maxAttempts: number) {\n    return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);\n  }\n\n  private async getMaxAttempts() {\n    let maxAttemptsStr: string;\n    try {\n      maxAttemptsStr = await this.maxAttemptsProvider();\n    } catch (error) {\n      maxAttemptsStr = DEFAULT_MAX_ATTEMPTS;\n    }\n    const maxAttempts = parseInt(maxAttemptsStr);\n    return Number.isNaN(maxAttempts) ? parseInt(DEFAULT_MAX_ATTEMPTS) : maxAttempts;\n  }\n\n  async retry<Input extends object, Ouput extends MetadataBearer>(\n    next: FinalizeHandler<Input, Ouput>,\n    args: FinalizeHandlerArguments<Input>\n  ) {\n    let retryTokenAmount;\n    let attempts = 0;\n    let totalDelay = 0;\n\n    const maxAttempts = await this.getMaxAttempts();\n\n    const { request } = args;\n    if (HttpRequest.isInstance(request)) {\n      request.headers[\"amz-sdk-invocation-id\"] = v4();\n    }\n\n    while (true) {\n      try {\n        if (HttpRequest.isInstance(request)) {\n          request.headers[\"amz-sdk-request\"] = `attempt=${attempts + 1}; max=${maxAttempts}`;\n        }\n        const { response, output } = await next(args);\n\n        this.retryQuota.releaseRetryTokens(retryTokenAmount);\n        output.$metadata.attempts = attempts + 1;\n        output.$metadata.totalRetryDelay = totalDelay;\n\n        return { response, output };\n      } catch (err) {\n        attempts++;\n        if (this.shouldRetry(err as SdkError, attempts, maxAttempts)) {\n          retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);\n          const delay = this.delayDecider(\n            isThrottlingError(err) ? THROTTLING_RETRY_DELAY_BASE : DEFAULT_RETRY_DELAY_BASE,\n            attempts\n          );\n          totalDelay += delay;\n\n          await new Promise((resolve) => setTimeout(resolve, delay));\n          continue;\n        }\n\n        if (!err.$metadata) {\n          err.$metadata = {};\n        }\n\n        err.$metadata.attempts = attempts;\n        err.$metadata.totalRetryDelay = totalDelay;\n        throw err;\n      }\n    }\n  }\n}\n"]}},"error":null,"hash":"73d3cc2fd6f692408949cfefd38cabe5","cacheData":{"env":{}}}